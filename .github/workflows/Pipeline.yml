# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["camzero" ]
  pull_request:
    branches: [ "camzero" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Setting an environment variable with the value of a configuration variable
  PYTHONPATH: ${{vars.PYTHONPATH}}
  DJANGO_SETTINGS_MODULE: ${{vars.DJANGO_SETTINGS_MODULE}} 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      # - name: Cache Pipenv
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ env.HOME }}/.cache/pipenv  # Adjust the path to match your Pipenv environment location
      #     key: ${{ runner.os }}-pipenv-${{ hashFiles('Pipfile.lock') }}

      # Runs a single command using the runners shell
      - name: Django Company API test 
        run:  |
          pip install pipenv --upgrade 
          pipenv install --system

          # export PYTHONPATH='$PYTHONPATH'
          # export DJANGO_SETTINGS_MODULE='$DJANGO_SETTINGS_MODULE'

          echo 'Python path is  $PYTHONPATH'
          echo 'Django is $DJANGO_SETTINGS_MODULE'
          # export PYTHONPATH=$PYTHONPATH:$PYTHONPATH/api/coronavstech
          # export DJANGO_SETTINGS_MODULE="api.coronavstech.coronavstech.settings"
          # pytest api/coronavstech -s -v 
          # pytest fibonacci -s -v 


